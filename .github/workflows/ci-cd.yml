# .github/workflows/ci-cd.yml

# Название рабочего процесса, которое будет отображаться в разделе "Actions" на GitHub
name: Python CI/CD Pipeline

# Триггеры для запуска:
# - при отправке (push) в ветку main
# - при создании или обновлении pull request на ветку main
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Первое "задание" - запуск тестов
  test:
    # Запускаем на свежей виртуальной машине с Ubuntu
    runs-on: ubuntu-latest

    # "Сервисы" - это Docker-контейнеры, которые запускаются рядом с основной задачей.
    # Здесь мы запускаем контейнер с PostgreSQL для наших тестов.
    services:
      postgres:
        image: postgres:13
        # Переменные окружения для инициализации базы данных
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        # Опции для проверки "здоровья" контейнера. GitHub Actions дождется,
        # пока база данных будет готова принимать подключения, прежде чем запускать тесты.
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Пробрасываем порт, чтобы наше приложение могло подключиться к БД по localhost
          - 5432:5432

    steps:
      # Шаг 1: Клонируем репозиторий в виртуальную машину
      - name: Checkout repository
        uses: actions/checkout@v4

      # Шаг 2: Настраиваем окружение Python нужной версии
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # Шаг 3: Устанавливаем все зависимости из requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # Шаг 4: Запускаем тесты Pytest
      - name: Run tests
        # Устанавливаем переменные окружения специально для этого шага
        env:
          FLASK_ENV: testing
          # ВАЖНО: Строка подключения указывает на сервис 'postgres' по localhost,
          # так как мы пробросили порт. Учетные данные совпадают с теми, что в 'services'.
          SQLALCHEMY_DATABASE_URI: postgresql://testuser:testpassword@localhost:5432/testdb
          FLASK_SECRET_KEY: a-secret-key-for-ci-testing # Секретный ключ для тестов
        run: |
          pytest

  # Второе "задание" - сборка и публикация Docker-образа
  build-and-push:
    # Это задание зависит от успешного выполнения задания 'test'
    needs: test
    # Запускается только при пуше в ветку 'main', а не на pull request
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Шаг для входа в Docker Hub (или другой registry, например, GitHub Container Registry)
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          # Эти переменные должны быть добавлены в секреты репозитория на GitHub
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      # Шаг для сборки Docker-образа и его отправки в registry
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Контекст сборки - корневая папка
          push: true # Указываем, что образ нужно отправить (push)
          # Теги для образа. Замените 'yourdockerhubusername' на ваш логин
          tags: yourdockerhubusername/product-tracker:latest